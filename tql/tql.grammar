keywordCell
 highlightScope keyword
comparisonCell
 enum < > = != includes doesNotInclude oneOf
stringCell
 highlightScope string
trueBaseIdCell
 description A global identifier for this entity in a TrueBase. Currently a very restricted character set to ensure compatibility between a wide variety of URLs and filesystems.
 regex [a-z0-9\-]+
 highlightScope string
regexCell
 highlightScope string
numberCell
 highlightScope constant.numeric
numberOrStringCell
 highlightScope constant.numeric
commentCell
 highlightScope comment
javascriptCell
 description Javascript code
 extends stringCell
customColumnNameCell
 highlightScope constant.numeric
columnNameCell
 description The column to search on.
 highlightScope constant.numeric
blankCell
tqlParser
 root
 description TrueBase Query Language (TQL) is a new language for querying a TrueBase.
 catchAllParser catchAllErrorParser
 inScope abstractQueryParser blankLineParser commentParser abstractModifierParser abstractMetaParser
 javascript
  get tests() {
    const tests = this.filter(node => node.toPredicate).map(node => {
        const predicate = node.toPredicate()
        return node.flip ? (file) => !predicate(file)  : predicate
    })
    return tests
  }
  filterFolder(trueBaseFolder) {
    const {tests} = this
    const predicate = file => tests.every(fn => fn(file))
    return trueBaseFolder.filter(file => predicate(file))
  }
abstractQueryParser
 cells keywordCell
 inScope abstractQueryParser commentParser
 javascript
  toPredicate() {
    return () => true
  }
catchAllErrorParser
 baseParser errorParser
blankLineParser
 description Blank lines are ignored.
 cells blankCell
 compiler
  stringTemplate 
 pattern ^$
 tags doNotSynthesize
 boolean shouldSerialize false
whereParser
 description Find files whose value in the given column meet this condition.
 extends abstractQueryParser
 cells keywordCell columnNameCell comparisonCell
 catchAllCellType numberOrStringCell
 crux where
 javascript
  toPredicate() {
    const columnName = this.getWord(1)
    const operator = this.getWord(2)
    return file => {
      const value = file.getTypedValue(columnName)
      const valueType = typeof value
      const textQueryValue = this.getWordsFrom(3).join(" ")
      let queryValue = textQueryValue
      if (valueType === "number")
        queryValue = parseFloat(queryValue)
      if (operator === ">")
        return value > queryValue
      if (operator === "<")
        return value < queryValue
      if (operator === "=")
        return value == queryValue
      if (operator === "!=")
        return value != queryValue
      if (operator === "includes")
        return value ? value.includes(queryValue) : false
      if (operator === "doesNotInclude")
        return value ? !value.includes(queryValue) : true
      if (operator === "oneOf")
        return value ? textQueryValue.split(" ").includes(value.toString()) : false
    }
  }
includesTextParser
 extends abstractQueryParser
 description Find files that include this text somewhere. Case insensitive.
 catchAllCellType stringCell
 crux includes
 javascript
  toPredicate() {
    const query = (this.content ?? "").toLowerCase()
    return file => file.lowercase.includes(query)
  }
doesNotIncludeTextParser
 description Find files that do not include this text anywhere. Case insensitive.
 extends includesTextParser
 crux doesNotInclude
 boolean flip true
columnIsMissingParser
 description Find files whose value in the given column is missing.
 extends abstractQueryParser
 cells keywordCell columnNameCell
 crux missing
 javascript
  toPredicate() {
    const columnName = this.getWord(1)
    return file => !file.has(columnName.replaceAll("_", " ")) && !file.parent.isComputedColumn(columnName)
  }
columnIsNotMissingParser
 description Find files whose value in the given column is not missing.
 extends columnIsMissingParser
 crux notMissing
 boolean flip true
matchesRegexParser
 description Find files that match this regex on a full text search.
 extends abstractQueryParser
 catchAllCellType regexCell
 crux matchesRegex
 javascript
  toPredicate() {
    const regex = new RegExp(this.content ?? "")
    return file => regex.test(file.asString)
  }
commentParser
 description Comments are ignored.
 crux #
 cells commentCell
 catchAllCellType commentCell
 catchAllParser commentParser
 boolean suggestInAutocomplete false
abstractModifierParser
 cells keywordCell
 cruxFromId
abstractColumnModifierParser
 extends abstractModifierParser
 catchAllCellType columnNameCell
selectParser
 description Choose which columns to return.
 extends abstractColumnModifierParser
selectAllParser
 description Select all the columns
 extends abstractColumnModifierParser
addColumnParser
 description Add a custom column using Javascript template strings.
 cells keywordCell customColumnNameCell
 catchAllCellType javascriptCell
 extends abstractModifierParser
 example
  addColumn GoogleSearch <a href="https://www.google.com/search?q=${row.title}">Search Google for ${row.title}</a>
renameParser
 cells keywordCell columnNameCell customColumnNameCell
 example
  rename githubRepo.stars Stars
 description Rename a column.
 extends abstractColumnModifierParser
sortByParser
 description Sort by these columns.
 extends abstractColumnModifierParser
 single
reverseParser
 extends abstractModifierParser
 description Reverse the order of results.
 single
limitParser
 extends abstractModifierParser
 description Return a maximum of this many results.
 cells keywordCell numberCell
 single
abstractMetaParser
 cells keywordCell
 catchAllCellType stringCell
 cruxFromId
 single
 boolean suggestInAutocomplete false
titleParser
 description Give your query a title for display on the results page.
 extends abstractMetaParser
descriptionParser
 description Give your query a description for display on the results page.
 extends abstractMetaParser